# .github/workflows/deploy.yml
name: Deploy FastAPI to Lambda

on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install zip
        run: sudo apt-get update && sudo apt-get install -y zip

      # 1) Layer 패키지 빌드
      - name: Build layer package
        run: |
          rm -rf layer layer.zip
          mkdir -p layer/python
          docker run --rm \
            --platform linux/amd64 \
            --entrypoint /bin/bash \
            -v "$PWD":/var/task \
            -w /var/task \
            public.ecr.aws/lambda/python:3.12 \
            -c "\
              microdnf install -y zip && \
              pip install --upgrade pip && \
              pip install fastapi pydantic openai tiktoken --target layer/python && \
              cd layer && zip -9 -r ../layer.zip python \
            "

      - name: Build function package
        run: |
          rm -rf package function.zip
          mkdir -p package
          cp -r app package/app
          (cd package && zip -r ../function.zip .)

      # 3) AWS 자격증명 설정
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 4) Layer 버전 발행 (로컬 layer.zip 사용)
      - name: Publish new layer version
        id: publish_layer
        run: |
          LAYER_ARN=$(aws lambda publish-layer-version \
            --layer-name fastapi-deps \
            --zip-file fileb://layer.zip \
            --compatible-runtimes python3.12 \
            --query 'LayerVersionArn' --output text)
          echo "layer_arn=$LAYER_ARN" >> $GITHUB_OUTPUT

      # 5) Lambda 설정 업데이트 (레이어, env, timeout, memory)
      - name: Update Lambda configuration (layer & env & timeout & memory)
        run: |
          aws lambda update-function-configuration \
            --function-name my-fastapi \
            --layers ${{ steps.publish_layer.outputs.layer_arn }} \
            --environment Variables="{OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }},OPENAI_BASE_URL=${{ secrets.OPENAI_BASE_URL }},OPENAI_BODY_ASSISTANT_ID=${{ secrets.OPENAI_BODY_ASSISTANT_ID }},OPENAI_STYLE_ASSISTANT_ID=${{ secrets.OPENAI_STYLE_ASSISTANT_ID }}}" \
            --timeout 60 \
            --memory-size 512

      # 6) Lambda 코드 배포
      - name: Update Lambda code
        run: |
          aws lambda update-function-code \
            --function-name my-fastapi \
            --zip-file fileb://function.zip

      # 7) API Gateway HTTP API 스테이지 재배포
      - name: Deploy HTTP API stage
        run: |
          API_ID=$(aws apigatewayv2 get-apis \
            --query "Items[?Name=='your-mode-http-api'].ApiId" --output text)
          echo "DEBUG: API_ID is '$API_ID'"
          aws apigatewayv2 create-deployment \
            --api-id "$API_ID" \
            --stage-name prod
      
